/****************************************************************************
 * Clinica.java: clase que realiza la simulacion de la clinica             *
 * de cuscatancingo utilizando un hilo que controla el                     *
 * tiempo elgido por el Usuaio                                             *
 ****************************************************************************/
package SimulacionClinica;
import java.awt.*;
import java.awt.image.*;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
 

public class Clinica extends java.awt.Frame implements Runnable{
        public String resultado,progreso=" ",captu;
        private JTextField res;
        private String sRuta= ".\\resources\\";
        private Image Client, Client1,Client2,Client3, escenario, paciente,sventanilla;
        private int px1[]={395,365,340,315,290,265,240,215,190,165,140,115,90,65,40,15};
        private int py1=422;
        private int px2[]={68,115,162,210,256,305,353};
        private int py2[]={181,220,260,296,336};
        private int ccajx[]={21,88,155,228,296,368,440,507};
        private int ccajy=63;
        private int ccajex=570;
        private int posyc=28;
        private int posxc[]={21,88,155,228,296,368,440};
        private int ccajey[]={108,265,420};
        public int X1,X2=-1,c2Y=0, Vcx=0, Vey;
        public int at1=0,at2=0,at3=0,at4=0,at5=0, pasa=0, libre=0,k;
        private BufferedImage db=new BufferedImage(640,480,BufferedImage.TYPE_4BYTE_ABGR);
        private Graphics gdb=db.getGraphics();
        Thread crono;
        private int minutos=0, segundos=0, horas=0,parar,aux;
        public String y="";
        private int numserv;
    private Image persona;

    public String getYr() {
        return y;
    }
    public void setParar(int parar) {
        this.parar = parar;
    }
        public int [] AuxiliarC={0,0,0,0,0,0,0,0,0,0};
        public int [] AuxiliarS={0,0,0};
        int s=0,Contador=0,i,User,ClienteNuevo,Times,atendido=0,suma=0,SumaTimes=0;
   
        int promlleg,ti=0,tf=0,clicol,climp,contaclimp=0;
        
        cola Cola;
        
        cola espera;
      
        Enfermera serv[]={new Enfermera (1,1),new Enfermera (2,1),new Enfermera (3,1),new Enfermera (4,1),
        new Enfermera (5,1),new Enfermera(6,1),new Enfermera (7,1),new Enfermera (8,2),new Enfermera (9,2),
        new Enfermera (10,2)};
        /** Creates new form Banco */
    public Clinica(int parar,int n) {
        System.out.println(parar);
        initComponents();
        cargarEscenario();
        this.parar = parar;
        numserv=n;
        crono = new Thread(this);
        Cola=new cola();
        espera=new cola();
        crono.start();
       cargarPaciente();
       cargarsventanilla();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setIconImage(persona);
        setResizable(false);
        setTitle("Simulacion");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jButton1.setText("Detener Simulacion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton2.setText("Salir Sistema");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(689, 490));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
detener();
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
System.exit(0);
}//GEN-LAST:event_jButton2ActionPerformed
       
 

    /**
    * @param args the command line arguments
    */
   

public void paint(Graphics g){
g.drawImage(escenario,0,0,this);
switch(c2Y){
        case 0:
            for (int i = at1; i < X2 + 1; i++)
              g.drawImage(Client,px2[i],py2[0],this);
        break;
        case 1:
            for (int i = at1; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[0],this);
            for (int i = at2; i < X2 + 1; i++)
              g.drawImage(Client,px2[i],py2[1],this);
        break;
        case 2:
            for (int i = at1; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[0],this);
            for (int i = at2; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[1],this);
            for (int i = at3; i < X2 + 1; i++)
              g.drawImage(Client,px2[i],py2[2],this);
        break;
        case 3:
            for (int i = at1; i < 7; i++)
              g.drawImage(Client,px2[i],py2[0],this);
            for (int i = at2; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[1],this);
            for (int i = at3; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[2],this);
            for (int i = at4; i < X2 + 1; i++)
              g.drawImage(Client,px2[i],py2[3],this);
        break;
        case 4:
            for (int i = at1; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[0],this);
            for (int i = at2; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[1],this);
            for (int i = at3; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[2],this);
            for (int i = at4; i < 7 ; i++)
              g.drawImage(Client,px2[i],py2[3],this);
            for (int i = at5; i < X2 + 1; i++)
              g.drawImage(Client,px2[i],py2[4],this);
        break;
    }
if(pasa==1){
if(at1>0||at2>0||at3>0||at4>0||at5>0){
  switch(c2Y){
        case 0:
            for (int i = 0; i < at1; i++)
              g.drawImage(Client,px2[i],py2[0],this);
        break;
        case 1:
            for (int i = 0; i < at1 ; i++)
              g.drawImage(Client,px2[i],py2[0],this);
            for (int i = 0; i < at2; i++)
              g.drawImage(Client,px2[i],py2[1],this);
        break;
        case 2:
            for (int i = 0; i < at1 ; i++)
              g.drawImage(Client,px2[i],py2[0],this);
            for (int i = 0; i < at2 ; i++)
              g.drawImage(Client,px2[i],py2[1],this);
            for (int i = 0; i < at3; i++)
              g.drawImage(Client,px2[i],py2[2],this);
        break;
        case 3:
            for (int i = 0; i < at1; i++)
              g.drawImage(Client,px2[i],py2[0],this);
            for (int i = 0; i < at2 ; i++)
              g.drawImage(Client,px2[i],py2[1],this);
            for (int i = 0; i < at3 ; i++)
              g.drawImage(Client,px2[i],py2[2],this);
            for (int i = 0; i < at4; i++)
              g.drawImage(Client,px2[i],py2[3],this);
        break;
        case 4:
            for (int i = 0; i < at1 ; i++)
              g.drawImage(Client,px2[i],py2[0],this);
            for (int i = 0; i < at2 ; i++)
              g.drawImage(Client,px2[i],py2[1],this);
            for (int i = 0; i < at3 ; i++)
              g.drawImage(Client,px2[i],py2[2],this);
            for (int i = 0; i <at4 ; i++)
              g.drawImage(Client,px2[i],py2[3],this);
            for (int i = 0; i < at5; i++)
              g.drawImage(Client,px2[i],py2[4],this);
        break;}
    }}
for(int i=libre;i<Vcx;i++){
    if(k<7){
  g.drawImage(Client2,ccajx[k],ccajy,this);}}
if(libre>0){
for(int i=0;i<=6;i++)
    if(AuxiliarC[i]==1){
  g.drawImage(Client2,ccajx[i],ccajy,this);}}
for(i=0;i<X1+1;i++)
g.drawImage(Client1,px1[i],py1,this);

for(int i=0;i<3;i++){
    if(AuxiliarC[i+6]==1){
  g.drawImage(Client3,ccajex,ccajey[i],this);}}
if(numserv>6){
for(int i=0;i<7;i++){
     g.drawImage(paciente,posxc[i],posyc,this);}}
if(numserv<7){
    for(int i=0;i<numserv;i++){
     g.drawImage(paciente,posxc[i],posyc,this);
     ;}
    }
if(numserv<=7){
    for(int i=0;i<3;i++){
     g.drawImage(sventanilla,ccajex-10,ccajey[i]-50,this);
     }
    
}
super.paint(g);
}
 public void update(Graphics g){
        paint(g);
    }

public void cargarEscenario(){
escenario=Toolkit.getDefaultToolkit().getImage(sRuta+"escenario.png");
}
//representala cola de entradaal banco
public void cargarCola1(){
Client1=Toolkit.getDefaultToolkit().getImage(sRuta+"p1.png");
}
//representa la cola principal de los asientos
public void cargarCola2(){
Client=Toolkit.getDefaultToolkit().getImage(sRuta+"p2.png");
}
//representa a las personas que estan siendo atendidas
//en ese momento por el paciente
public void cargarServidorPaciente(){
Client2=Toolkit.getDefaultToolkit().getImage(sRuta+"p3.png");
}
//representa a las personas que estan siendo atendidas
//en ese momento por el ejecutivo
public void cargarServidorEjecutivo(){
Client3=Toolkit.getDefaultToolkit().getImage(sRuta+"p2.png");
}
public void cargarPaciente(){
paciente=Toolkit.getDefaultToolkit().getImage(sRuta+"servidor.png");
}
public void cargarsventanilla(){
sventanilla=Toolkit.getDefaultToolkit().getImage(sRuta+"nd.png");
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables


    public void run() {
         try {
          for( i=1;i<=parar;i++) {
           if(segundos==59)
           {
               segundos=0;
               minutos++;
           }
           if(minutos==59)
           {
               minutos=0;
               horas++;
           }
          segundos++;
          s++;
          aux=(int)(Math.random()*2);
          suma=suma+aux;
          for(X1=aux-1;X1>-1;X1--){
              if(c2Y<5){
                  cargarCola1();
                  crono.sleep(500);
                  repaint();
                  cargarCola2();
                  crono.sleep(500);
                  repaint();
                  X2++;
                  if(X2>6){
                  X2=0;c2Y++;}}
              if(c2Y>4){c2Y=4; pasa=1;}
             
          }
          repaint();
          progreso+="Han llegado "+aux+" paciente(s)\n";
          System.out.println("Han llegado "+aux+" paciente(s)\n");
          y= "Han llegado "+aux+" paciente(s)/n";
          
          if(aux!=0)
                     for(int j=1;j<=aux;j++)
                      {
                         Contador++;
                          
                         if(Cola.getCliente()==35)
                         {
                             espera.insertar(Contador,false);
                             
                             progreso+="Paciente en espera para entrar "+captu+"\n";
                             System.out.println("Pacientes en espera para entrar");
                             espera.print();
                             y+="Paciente en espera para entrar/n";
                             
                             y+=espera.print();
                             if((int)(Math.random()*16)==7)
                             {
                                      climp=(int)(Cola.primerDato()+Math.random()*Cola.ultimoDato());
                                      progreso+="Pacientes impaciente "+climp+" abandona la clinica\n";
                                      System.out.println("Paciente impaciente "+climp+" abandona la clinica\n");
                                      y+="Paciente impaciente "+climp+" abandona la clinica\n";
                                      Cola=Cola.clienteimpaciente(climp,true);
                                      contaclimp++;
                                      
                                      System.out.println("Pacientes sentados");
                                      Cola.print();
                                      y+="Pacientes sentados ";
                                      Cola.print();
                                      y+=Cola.print();
                             }
                             for(k=0;k<numserv;k++){
                                 if(serv[k].ocupado(s)==false){
                                    
                                     progreso+="El servidor "+(k+1)+" esta desocupado/n";
                                     System.out.println("El servidor "+(k+1)+" esta desocupado/n");
                                     y+="El servidor "+(k+1)+" esta desocupado/n";
                                     AuxiliarC[k]=0;repaint();crono.sleep(500);
                                 }}
                              for(k=0;k<numserv;k++)
                                      if(Cola.vacia()==false&&serv[k].ocupado(s)==false&&serv[k].getTipo()==Cola.getTrance())//Cola.vacia()==false
                                      {
                                          //-esto es comun
                                             User=Cola.sacar(true);
                                             tf=tf+s;
                                             atendido++;
                                             libre++;
                                             Times=(int)(1+Math.random()*6);
                                             SumaTimes=SumaTimes+Times;
                                             progreso+="El servidor "+(k+1)+" atiende al Paciente "+User+" Habra que esperar "+Times+" seg";
                                             System.out.println("El servidor "+(k+1)+" atiende al Paciente "+User+" Habra que esperar "+Times+" seg");
                                             y+="El servidor "+(k+1)+" atiende al Paciente "+User+" Habra que esperar "+Times+" seg/n";
                                             AuxiliarC[k]=1;
                                             if(at5>=7){
                                                           at1=0;at2=0;
                                                           at3=0;at4=0;at5=0;}
                                             if(at1<7){
                                                 at1++;
                                                 Vcx++;
                                                 cargarServidorPaciente();
                                                 cargarServidorEjecutivo();
                                                 crono.sleep(500);
                                                }
                                             else{if(at2<7){
                                                 at2++;
                                                 Vcx++;
                                                 cargarServidorPaciente();
                                                 cargarServidorEjecutivo();
                                                 crono.sleep(500);
                                                }
                                                  else{if(at3<7){
                                                        at3++;
                                                        Vcx++;
                                                  cargarServidorPaciente();
                                                  cargarServidorEjecutivo();
                                                  crono.sleep(500);
                                                 }
                                                  else{if(at4<7){
                                                  at4++;
                                                  Vcx++;
                                                  cargarServidorPaciente();
                                                  cargarServidorEjecutivo();
                                                  crono.sleep(500);
                                                 }
                                                       else{if(at5<7){
                                                  at5++;
                                                  Vcx++;
                                                  cargarServidorPaciente();
                                                  cargarServidorEjecutivo();
                                                       crono.sleep(500);}
                                                            }
                                                     }
                                                 }
                                          } crono.sleep(500);
                                             serv[k].tiempo(s,Times, User);
                                             libre++;
                       
                                            // repaint();
                                             
                                             System.out.println("Pacientes sentados ");
                                             Cola.print();
                                             y+="Pacientes sentados /n";
                                             
                                             y+=Cola.print();
                                             
                                             
                                            if(espera.vacia()==false&&Cola.getCliente()<35)
                                            {
                                                 ClienteNuevo=espera.sacar(false);
                                                 progreso+="El Paciente "+ClienteNuevo+" ha pasado a sentarse\n";
                                                 System.out.println("El Paciente "+ClienteNuevo+" ha pasado a sentarse\n");
                                                 y+="El Paciente "+ClienteNuevo+" ha pasado a sentarse";
                                                 Cola.insertar(ClienteNuevo,true);
                                                 ti=ti+s;
                                                 
                                                 System.out.println("Pacientes sentados ");
                                                 Cola.print();
                                                 y+="Pacientes sentados/n ";
                                                 y+=Cola.print();
                                                 
                                                 System.out.println("Pacientes en espera para entrar");
                                                 captu=Cola.print();
                                                 captu=espera.print();
                                                 y+="Pacientes en espera para entrar/n"+captu;
                                                 y+=espera.print();
                                            }
                                      }
                             

                              if(espera.vacia()==false&&Cola.getCliente()<35)
                               {
                                       ClienteNuevo=espera.sacar(false);
                                       progreso="El Paciente "+ClienteNuevo+" ha pasado a sentarse";
                                       System.out.println("El Paciente "+ClienteNuevo+" ha pasado a sentarse");
                                       Cola.insertar(ClienteNuevo,true);
                                       ti=ti+s;
                                       
                                       System.out.println("Pacientes sentados ");
                                       Cola.print();
                                       
                                       System.out.println("Pacientes en espera para entrar");
                                       espera.print();

                               }
                          }
                    
                        else
                         {
                                if(Cola.getCliente()<35)
                                {
                                     Cola.insertar(Contador,true);
                                     ti=ti+s;
                                     
                                     System.out.println("Pacientes sentados ");
                                     Cola.print();
                                }
                                 for(k=0;k<numserv;k++)
                                 if(serv[k].ocupado(s)==false){
                                   
                                     AuxiliarC[k]=0;repaint();crono.sleep(500);}
                                for( k=0;k<numserv;k++)
                                      if(Cola.vacia()==false && serv[k].ocupado(s)==false&&serv[k].getTipo()==Cola.getTrance())
                                      {
                                             //-esto esta en comun
                                             User=Cola.sacar(true);
                                             tf=tf+s;
                                             atendido++;
                                             Times=(int)(1+Math.random()*6);
                                             SumaTimes=SumaTimes+Times;
                                             progreso+="El servidor "+(k+1)+" atiende al Paciente "+User+" Habra que esperar "+Times+" seg\n";
                                             System.out.println("El servidor "+(k+1)+" atiende al Paciente "+User+" Habra que esperar "+Times+" seg\n");
                                             AuxiliarC[k]=1;
                                             if(at5>=7){
                                                           at1=0;at2=0;
                                                           at3=0;at4=0;at5=0;}
                                             if(at1<7){
                                                 at1++;
                                                 Vcx++;
                                                 cargarServidorPaciente();
                                                 cargarServidorEjecutivo();
                                                 crono.sleep(500);
                                                }
                                             else{if(at2<7){
                                                 at2++;
                                                 Vcx++;
                                                 cargarServidorPaciente();
                                                 cargarServidorEjecutivo();
                                                 crono.sleep(500);
                                                }
                                                  else{if(at3<7){
                                                        at3++;
                                                        Vcx++;
                                                  cargarServidorPaciente();
                                                  cargarServidorEjecutivo();
                                                  crono.sleep(500);
                                                 }
                                                  else{if(at4<7){
                                                  at4++;
                                                  Vcx++;
                                                  cargarServidorPaciente();
                                                  cargarServidorEjecutivo();
                                                  crono.sleep(500);
                                                 }
                                                       else{if(at5<7){
                                                  at5++;
                                                  Vcx++;
                                                  cargarServidorPaciente();
                                                  cargarServidorEjecutivo();
                                                       crono.sleep(500);}
                                                        }}}
                                          } crono.sleep(500);
                                             serv[k].tiempo(s,Times, User);
                                             repaint();
                                             libre++;
                                             
                                             System.out.println("Pacientes sentados");
                                             Cola.print();
                                           
                                      }
                              
                                if(Cola.getCliente()<35&&espera.vacia()==false)
                                {
                                   ClienteNuevo= espera.sacar(false);
                                   progreso+="El Paciente "+ClienteNuevo+" ha pasado a sentarse\n";
                                   System.out.println("El Paciente "+ClienteNuevo+" ha pasado a sentarse\n");
                                   Cola.insertar(ClienteNuevo,true);
                                   ti=ti+s;
                                   
                                   System.out.println("Pacientes sentados ");
                                   Cola.print();
                                   
                                   System.out.println("Pacientes en espera para entrar");
                                   espera.print();
                                }
                          }
                     }
       
          clicol=clicol+Cola.getCliente();
          if(s==parar)
          {
              detener();
              SimulacionClinica vent =new SimulacionClinica();
              vent.ini(progreso);
              
              }
          System.out.println(horas+":"+minutos+":"+segundos+"\n");
           progreso+=horas+":"+minutos+":"+segundos+"\n";
          
           crono.sleep(1000);
         }
}
catch (InterruptedException e) { System.out.println(e.getMessage()); }
        
}
   public void detener()
    {
       SimulacionClinica vent =new SimulacionClinica();
       vent.ini(progreso);
       crono.suspend();
       resultado="finalizacion simulacion\n";
              resultado+="Informe del la Clinica de Cuscatancingo\n";
              promlleg=suma/atendido;
              resultado+="se atendieron: "+atendido+" Pacientes\n";
              resultado+="No se atendieron: "+Math.abs((Contador-atendido))+" Pacientes por falta de tiempo\n";
              resultado+="Existieron: "+contaclimp+" clientes impacientes\n";
              resultado+="El tiempo promedio de espera es: "+Math.abs((ti-tf)/atendido)+" min\n";
              resultado+="El promedio de tiempo de atencion al Pacientes es: "+SumaTimes/atendido+" min\n";
              resultado+="El promedio de llegada por los Pacientes a la clinica es: "+promlleg+" Paciente(s) por min\n";
              resultado+="El tiempo que habia de pacientes haciendo cola es: "+(clicol/parar)+" pacientes por min\n";
              for( k=0;k<numserv;k++)
              {
                  if(serv[k].getNumcli()!=0)
                   resultado+="El servidor: "+(k+1)+" atendio "+serv[k].getNumcli()+" paciente y se demoro "+(serv[k].getTt())/serv[k].getNumcli()+" clientes por min\n";
                  else{
                      resultado+="El servidor: "+(k+1)+" no atendio a ningun paciente\n";
              }
                 
              }
              
              JOptionPane.showMessageDialog(null, resultado); 
              
        
        
        
    }  
}
